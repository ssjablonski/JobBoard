// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum EmploymentType {
  FULL_TIME
  PART_TIME
  INTERNSHIP
}

enum Mode {
  REMOTE
  ONSITE
  HYBRID
}

model User {
  id        String        @id @default(cuid())
  email     String        @unique
  name      String?
  companies UserCompany[]
  Company   Company?      @relation(fields: [companyId], references: [id])
  companyId String?
}

model Company {
  id          String        @id @default(cuid())
  name        String
  offers      Offer[]
  employees   User[]
  UserCompany UserCompany[]
}

model Offer {
  id             String         @id @default(cuid())
  title          String
  companyId      String
  company        Company        @relation(fields: [companyId], references: [id])
  location       String
  employmentType EmploymentType
  mode           Mode
  createdAt      DateTime       @default(now())
}

model UserCompany {
  userId    String
  companyId String
  user      User    @relation(fields: [userId], references: [id])
  company   Company @relation(fields: [companyId], references: [id])

  @@id([userId, companyId])
}

// TODO zrobic tak zeby user mogl miec wiecej niz jedna firma
// TODO zrobic tak ze gdy ktos loguje sie keycloakiem to sprawdzamy w bazie czy jest taki user jak nie to dodajemy go

// ? sprawdz czy da sie zrobic tak zeby odwolywac sie np offer.comapny.name!

// ! dodaj scheme i pozniej docker compose up i npx prisma db push
